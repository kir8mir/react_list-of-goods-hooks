{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","goods","useState","value","setValue","typeOfSort","setTypeOfSort","isReversed","setRevers","isReseted","setReset","className","type","classNames","onClick","arr","sort","g1","g2","localeCompare","length","current","reverse","map","good","ReactDOM","render","document","getElementById"],"mappings":"uPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAKWC,EAAgB,WAC3B,IAAMC,EAAK,UAAOF,GAElB,EAA0BG,mBAASD,GAAnC,mBAAOE,EAAP,KAAcC,EAAd,KACA,EAAoCF,mBAAS,QAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAkBC,EAAlB,KAkCA,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAA2B,SAAfR,IAEhBS,QAAS,kBAAMV,GAjCLW,EAiCuBZ,EAhCvCG,EAAc,QACdE,GAAU,GACVE,GAAS,GAED,YAAIK,GAAKC,MAAK,SAACC,EACrBC,GADoB,OACbD,EAAGE,cAAcD,QANX,IAACH,GA0BZ,iCAYA,wBACEH,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAA2B,WAAfR,IAEhBS,QAAS,kBAAMV,GAtDHW,EAsDuBZ,EArDzCG,EAAc,UACdE,GAAU,GACVE,GAAS,GAED,YAAIK,GAAKC,MAAK,SAACC,EACrBC,GADoB,OACbD,EAAGG,OAASF,EAAGE,YANP,IAACL,GA+Cd,4BAYA,wBACEH,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAAaN,IAEjBO,QAAS,kBAAMV,GAzCDW,EAyCuBZ,EAxC3CK,GAAU,SAAAa,GAAO,OAAKA,KACtBX,GAAS,GAEF,YAAIK,GAAKO,YAJG,IAACP,GAkChB,sBAYEN,GAEE,wBACEG,KAAK,SACLD,UAAU,4BACVG,QAAS,kBAzDnBR,EAAc,QACdF,EAASH,GACTS,GAAS,QACTF,GAAU,IAmDF,sBAWN,6BACE,6BACGL,EAAMoB,KAAI,SAAAC,GAAI,OACb,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,cChHrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.036bea64.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype Goods = string[];\n\nexport const App: React.FC = () => {\n  const goods = [...goodsFromServer];\n\n  const [value, setValue] = useState(goods);\n  const [typeOfSort, setTypeOfSort] = useState('NONE');\n  const [isReversed, setRevers] = useState(false);\n  const [isReseted, setReset] = useState(true);\n\n  const lengthSort = (arr: Goods) => {\n    setTypeOfSort('LENGTH');\n    setRevers(false);\n    setReset(false);\n\n    return ([...arr].sort((g1,\n      g2) => g1.length - g2.length));\n  };\n\n  const alphSort = (arr: Goods) => {\n    setTypeOfSort('ALPH');\n    setRevers(false);\n    setReset(false);\n\n    return ([...arr].sort((g1,\n      g2) => g1.localeCompare(g2)));\n  };\n\n  const resetGoods = () => {\n    setTypeOfSort('NONE');\n    setValue(goods);\n    setReset(true);\n    setRevers(false);\n  };\n\n  const reverseGoods = (arr: Goods) => {\n    setRevers(current => !current);\n    setReset(false);\n\n    return [...arr].reverse();\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': typeOfSort !== 'ALPH' },\n          )}\n          onClick={() => setValue(alphSort(value))}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success',\n            { 'is-light': typeOfSort !== 'LENGTH' },\n          )}\n          onClick={() => setValue(lengthSort(value))}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => setValue(reverseGoods(value))}\n        >\n          Reverse\n        </button>\n\n        {!isReseted\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => resetGoods()}\n            >\n              Reset\n            </button>\n          )}\n\n      </div>\n\n      <ul>\n        <ul>\n          {value.map(good => (\n            <li key={good} data-cy=\"Good\">{good}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}